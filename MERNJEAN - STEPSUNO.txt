Jean Rauwers (Tutorials)

EPISODE 0
Complete Coding Bootcamp tutorial MERN Stack 2020 - episode 0
https://www.youtube.com/watch?v=_kP5e9fi9yo&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=2

Must Have:

Downloadd Insomia https://insomnia.rest/download
MongoDB Atlas
Node JS
VS Code

#####################AS A DEVELOPER ALWAYS ASK YOUR WHY?#####################

1.  Create Your Project Folder>Right Click>Git Bash>npm init>just make your entry point server.js

Install Dependecies
npm i express mongoose cors dotenv nodemon bcryptjs multer

REMARKS

express		for server
mongoose 	for database
cors            can allow request from different devices
dotenv 		to read environment  varaibles
nodemon		to automatically update our server for any changes
bcryptjs	to hash our password
multer          is a node.js middleware for handling multipart/form-data , which is primarily used for uploading files

#####################AS A DEVELOPER ALWAYS ASK YOUR WHY?#####################

2.  Create a Folder called src>then create server.js File
Then in package.json. We have to  change the value of main keyword and start keyword

In "main" change the value as per below details
 "main": "src/server.js",
  
Under scripts just add
"start": "nodemon src/server.js"

Remraks:
package.json is in the root folder
server.js is just in the src folder in above path file dot or . is not required to put.


############################################################################

3.  in server.js
//main module that connects all our modules.

const express = require ("express");
const app = express();
const cors = require ("cors");



const port = process.env.PORT || 3000;


app.use(cors());
app.use (express.json()); //always at the end.

app.get("/", (req, res)=>{
    res.send ("Hello from Express");
})


app.listen (port, ()=>{
    console.log (`Listening on Port ${port}`);
})


Remarks: Working Good
Right Click your Project Folder>Gitbash type in>
nodemon src/server.js or just nodemon

Go to browser, http://localhost:3000/


############################################################################

4.  SETUP MONGODB ATLAS & GET CONNECTION STRING

MongoDB Atlas through NodeJS
https://www.youtube.com/watch?v=UrjZ3qn44uE

Once you were able to get  your Connection String

Inside your Project Folder>Create a file called .env

Type in the below code. This is where we will store our environtment variable.



SESSION_SECRET = secret;
MONGO_DB_CONNECTION = mongodb+srv://database:MFQVo4hCtSrDFQ47@cluster101.uogtn.mongodb.net/?retryWrites=true&w=majority

Remarks: 
Do not use semi colon at end of the connection string or else it will give you the below error.

ERROR
No write concern mode named 'majority`' found in replica set configuration' error


####

In server.js
DATABASE SETUP USING MONGOOSE


const mongoose = require ("mongoose");
mongoose.set('strictQuery', false);


if(process.env.NODE_ENV !== "production"){
    require("dotenv").config();
};


try{
    mongoose.connect(process.env.MONGO_DB_Connection, {
        useNewUrlParser:true,
        useUnifiedTopology:true
    });
}
catch(error){
    console.log(error);
}


********************SEE THE BELOW COMPLETE UPDATED SYNTAX FOR SERVER.JS - WORKING FINE***********************

const express = require ("express");
const cors = require ("cors");
const mongoose = require ("mongoose");
mongoose.set('strictQuery', false);
const app = express();


const port = process.env.PORT || 8000;

if(process.env.NODE_ENV !== "production"){
    require("dotenv").config();
};

app.use(cors());
app.use (express.json());


app.get("/", (req, res)=>{
    res.send ("Hello from Express it's me.");
})



try{
    mongoose.connect(process.env.MONGO_DB_Connection, {
        useNewUrlParser:true,
        useUnifiedTopology:true
    });
    console.log ("MongoDb Connected");
}
catch(error){
    console.log(error);
}


app.listen (port, ()=>{
    console.log (`Listening on Port ${port}`);
});


############################################################################


6. LET'S CREATE A USER MODEL

This app woul have a registration with firstName, lastName, password and email. 
So we'll create a model schema for this.

inside of our src FOLDER, create models FOLDER, then insde create User.js FILE



In User.js file


const mongoose = require ("mongoose");

const UserSchema = new mongoose.Schema ({
    firstName: String,
    lastName: String,
    password: String,
    email: String
});

module.exports = mongoose.model ("User", UserSchema);

Remarks
User could be any name you want.
It would be the name that will appear on your mongodb database.


###



Remarks

http://localhost:3000/


comeback

7. LET'S CREATE OUR CONTROLLER AND CREATE A LOGIC FOR OUR USER

inside our src FOLDER, create controllers FOLDER, then UserController.js file
Basically the reason we created this module with the file UserController was bec this is where
we will create the logic for our model. 
We will create a function to create our user model.


const User = require ("../models/user");


module.exports = {

async createUser (req, res){

try{
    console.log (req.body);
    const{firstName, lastName, password, email} = req.body;
    

    const user = await User.create ({
        firstName : firstName,
        lastName: lastName,
        password: password,
        email: email
    });
    return res.json (user);
    
}
catch(error){
    throw Error (`Error while registering a new user: ${error}`);

}




}//end of createUser function, there  should be no semi colon here or else it will give an error.
};//end of module.exports



REMARKS ONLY

we require our user model
created module.exports
created the createUser function as async
  we tried to create the  logic and used create method and return our user object.
Then put it in the try catch block

In the logic
We use Object destructing. whatever we get from req.body we are storing it
in the same key pair from our UserSchema.

In our create method we are also using the same key pair from our UserSchema the assign the value
that we get from our req.body but not the literal value ok but it's variable which is the same in
our UserSchema as well.


body is an object containing text parameters from the parsed request body, defaulting to {}.
By default, the request body can be URL-encoded or stringified as JSON. Support for other formats, such as serialized XML, is possible using the middleware configuration.

const User = require ("../models/user");
Why there are 2 dots in our user path?
Because user.js file is inside of a models Folder and our  UserController.js file is also in it's own Folder.
since it has it's one designated folders the reason it has 2 dots.
Name convention should be related to what is really we are storing.

what we are trying to do now is to create a User and return this User as a json Object.


########################


then in server.js  let's create our POST route and let's require our UserController


const UserController = require ("./controllers/UserController")


Add this Post Route
app.post ("/user/register", UserController.createUser )
//my issue before was I forgot to put backslash before the user.



REMARKS
Yo will notice that there is only 1 dot in our controllers path. Why?
server.js is not in a Folder
UserController.js is in a folder called controllers
Since there are only 1 Folder, so 2 dots are not required but just 1.

See the post route? we can put any route path we want, then we pass in the var for our 
UserController the access it's fucntion called createUser


##################

UPDATED SERVER.JS



const express = require ("express");
const app = express ();
const cors = require ("cors");
const mongoose = require("mongoose");
mongoose.set('strictQuery', false);
const UserController = require ("./controllers/UserController")



const port = process.env.PORT || 3000;


app.use (cors());
app.use (express.json());


if(process.env.NODE_ENV !== "production"){
    require("dotenv").config();
};


try{
    mongoose.connect(process.env.MONGO_DB_Connection, {
        useNewUrlParser:true,
        useUnifiedTopology:true
    });
}
catch(error){
    console.log(error);
}



app.get("/", (req, res)=>{
    res.send ("First Route");
})

app.get("/user/register", (req, res)=>{
    res.send ("First Route");
})


app.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.



app.listen (port, ()=>{
    console.log (`Listening to Port Number ${port}`)
});


####################


Then Go to Postman
POST http://localhost:3000/user/register
Body>Raw>JSON>Click Send

{   "firstName": "Paul",
    "lastName": "Jackkie",
    "password" : "fesjeafae",
    "email": "paul@gmail.com"}




Remarks
Right Click your Project Folder>Gitbash type in>
nodemon src/server.js

Browser
http://localhost:3000/
POSTMAN
http://localhost:3000/user/register


ERROR
No write concern mode named 'majority`' found in replica set configuration' error

Solution go to your connection string
MONGO_DB_CONNECTION = mongodb+srv://database:MFQVo4hCtSrDFQ47@cluster101.uogtn.mongodb.net/?retryWrites=true&w=majority
just remove the semi colon


https://www.youtube.com/watch?v=_kP5e9fi9yo&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=2

51:20



############################################################################

53:13


8. SETUP OUR EMAIL TO BE UNIQUE.
   Go to UserController.js Update the below Code


Added
const existentUser = await User.findOne({email});
Then added if and else if statement, and sandwich the other code.
Added
if and else if condition

#########################

UPDATED  CODE - UserController.js


const User = require ("../models/user");

module.exports = {

async createUser (req, res){

try{
    console.log (req.body);
    const{firstName, lastName, password, email} = req.body;

    const existentUser = await User.findOne({email});


    if (!existentUser){

        const user = await User.create ({
            firstName : firstName,
            lastName: lastName,
            password: password,
            email: email
        });
        return res.json (user);

    }//end of if condition

    else if (existentUser){
        return res.status(400).json({
            message: "email/user already exist! Do  you want to login instead?"
        })  

    }//end of else if condition


}
catch(error){
    throw Error (`Error while registering a new user: ${error}`);

}



}//end of createUser function, there  should be no semi colon here or else it will give an error.
};//end of module.exports




REMARKS
We added const existentUser = await User.findOne({email});
Then added if and else if statement


9. LET'S HAS OUR  PASSWORD in UserController.js
   npm i bycryptjs

   in UserController.js
   We have added const bcrypt = require ("bcryptjs");

   then inside of our if condition which is saying if not existerUser  add the  below code.
   const hashedPassword = await bcrypt.hash(password, 10);
   password is the parameter in our req.body and parameter for our user schemal model
   we are trying to hashed the actual value to 10 nos ofstric character.
   And when we care createing a new User we are seetting it up to the hashedPassword.



SEE THE BELOW UPDATED CODE WITH HASHED PASSWORD

##################
in UserController.js

const User = require ("../models/user");
const bcrypt = require ("bcryptjs");


module.exports = {

async createUser (req, res){

try{
    console.log (req.body);
    const{firstName, lastName, password, email} = req.body;

    const existentUser = await User.findOne({email});


    if (!existentUser){

        const hashedPassword = await bcrypt.hash(password, 10) 

        const user = await User.create ({
            firstName : firstName,
            lastName: lastName,
            password: password,
            email: hashedPassword //changed the value to hashedPassword
        });
        return res.json (user);

    }//end of if condition

    else if (existentUser){
        return res.status(400).json({
            message: "email/user already exist! Do  you want to login instead?"
        })  

    }//end of else if condition


}
catch(error){
    throw Error (`Error while registering a new user: ${error}`);

}



}//end of createUser function, there  should be no semi colon here or else it will give an error unless you add another  async function.

};//end of module.exports



REMARKS

Go to postman>POST Method>http://localhost:3000/user/register
Body>Raw>JSON

Paste the below Code, then check the result if pw has been  hashed.


{"firstName":"Margaret",
"lastName": "Martin",
"password" : "nobodyelse",
"email": "holidaygmail.com"}



IT WORKS HERE...

***************************************************************************************



EPISODE 1
https://www.youtube.com/watch?v=U3B2TdYMmmU&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=3

Remarks:


10.LET'S CREATE A SEPARATE MODULE FOR OUR ROUTE AND TRANSFER ALL OUR ROUTES FROM SERVER.JS

in src FOLDER, create routes.js
Add the below middleware and moudle

const express = require ("express");
const routes = express.Router();
const UserController =  require ("./controllers/UserController"); 



then transfer all our routes from server.js to this file. See the below updated code but instead of
app.get and app.post we will be changing it to routes.get and routes. post

See the below Final Code for routes.js


Remarks:
Why there is 1 dot in the controolers path? our roures.js file has no folder and we require our UserController
which is in controllers folder the reason we need to add the dot.

##################


UPDATED route.js 

const express = require ("express");
const routes = express.Router();
const UserController = require ("./controllers/UserController")

// routes.get("/", (req, res)=>{
//     res.send ("First Route");
// })

routes.get("/status", (req, res)=>{
    res.send ({status:200});
})

routes.get("/user/register", (req, res)=>{
    res.send ("First Route");
})

//intead of app.get we use routes.get. Please analyze the code.

routes.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.




module.exports = routes;


#################

Then in server.js


remove
const UserController =  require ("./controllers/UserController");
remove 
all our routes

Add the below code in server.js

const routes = require ("./routes");
app.use(routes); //Can't access "app" before initialization. Make sure this syntax is in this order before the app.listen and port variable.

REMARKS
To avoid Error: read ECONNRESET
make sure that you put app.use(routes); above your app.listen code or else it wont work, and youll get
ECONNRESET ERROR

####

SERVER.JS UPDATED CODE

const express = require ("express");
const cors = require ("cors");
const mongoose = require("mongoose");
const routes = require ("./routes");
mongoose.set("strictQuery", false);
const app = express();

app.use (cors());
app.use (express.json());


if(process.env.NODE_ENV !== "production"){
    require("dotenv").config();
};


try{
    mongoose.connect(process.env.MONGO_DB_Connection, {
        useNewUrlParser:true,
        useUnifiedTopology:true
    });
}
catch(error){
    console.log(error);
}



app.use(routes);//Can't access "app" before initialization. Make sure this syntax is in this order.
const PORT = process.env.PORT || 3000;
app.listen (PORT, ()=>{
    console.log (`Listening to Port ${PORT}`)
});

#####

TEST YOUR APP AGAIN

REMARKS

nodemon src/server.js

Go to postman>POST Method>http://localhost:3000/user/register
Body>Raw>JSON

Paste the below Code, then check the result if pw has been  hashed.


{"firstName":"Margaret",
"lastName": "Martin",
"password" : "nobodyelse",
"email": "holidaygmail.com"}

Go to Browser
http://localhost:3000/status




######################################################################################################



11. CREATE OUR ROUTE THAT WILL GET THE USER 

https://www.youtube.com/watch?v=U3B2TdYMmmU&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=4
Complete Coding Bootcamp tutorial MERN Stack 2020 - episode 1

6:30

in routes.js


####
Create the below route in routes.js

routes.get("/user/:userId", UserController.getUserById);


//:userId is our parameter in this path, and in controllers folder we have UserController.js FILE
//getUserById is our function which we will modify later on in UserController.js

// we will use userID as the variable for our destructing object and we will use it
as a storage for the value from req.params;
//userId could be any name. 


####################################

UPDATED route.js
const express = require ("express");

const routes = express.Router();


const UserController = require ("./controllers/UserController")


// routes.get("/", (req, res)=>{
//     res.send ("First Route");
// })

routes.get("/status", (req, res)=>{
    res.send ({status:200});
})

routes.get("/user/register", (req, res)=>{
    res.send ("First Route");
})


routes.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.

routes.get("/user/:userId", UserController.getUserById);


module.exports = routes;



####################################


in UserController.js


Remember this is where we have createUser method inside of the module.exports where this previous
function was created, we'll add another function called getUserById.

Just add comma after the  createUser function.

Again
userId is the paramenter name  we set in our route but it could be any name.
We use userId as varible in our destructiong object to store the value from req.params
We we get the value, we tried to access the User in our database use its method called findById
which  store in userId, then store it in user variable then return as a jsoon object.



 async getUserById(req, res){
    const {userId} = req.params;
    //userId is our parameter in our route
    try{
        const user =  await User.findById(userId);
        return res.json(user);
    }
    catch(error){
        return res.status(400).json({
        message: "User ID does not exist. Do you want to register?"
    })
    }
}



###########################

UPDATED CODE FOR UserController.js


const User = require ("../models/user");
const bcrypt = require ("bcryptjs");


module.exports = {

async createUser (req, res){

try{
    console.log (req.body);
    const{firstName, lastName, password, email} = req.body;

    const existentUser = await User.findOne({email});


    if (!existentUser){

        const hashedPassword = await bcrypt.hash(password, 10) 

        const user = await User.create ({
            firstName : firstName,
            lastName: lastName,
            password: hashedPassword,
            email: email
        });
        return res.json (user);

    }//end of if condition

    else if (existentUser){
        return res.status(400).json({
            message: "email/user already exist! Do  you want to login instead?"
        })  

    }//end of else if condition



}
catch(error){
    throw Error (`Error while registering a new user: ${error}`);
}

},//end of createUser function, there  should be no semi colon here or else it will give an error unless you add another  async function.
 //now wee are adding comma because we will be adding another asysnc function for our UserController.js


 async getUserById(req, res){
    const {userId} = req.params;
    //userId is our parameter in our route
    try{
        const user =  await User.findById(userId);
        return res.json(user);
    }
    catch(error){
        return res.status(400).json({
        message: "User ID does not exist. Do you want to register?"
    })
    }
}




};//end of module.exports


######################


REMARKS: LET'S TEST OUR ROUTE


Go to POSTMAN
GET http://localhost:3000/user/gdfdgs
EX: gdfdgs is a wrong user ID. You should get message: "User ID does not exist. Do you want to register?"


Go to POSTMANT
POST http://localhost:3000/user/register
Body>Raw>JSON

Paste the below Code, then check the result if pw has been  hashed.


{"firstName":"Markkkt",
"lastName": "MarDtjjjin",
"password" : "noDbodyelse",
"email": "medi@gmail.com"}


For above json Object, we got this id.

63f3cb3ef47727f9feb42064

THEN GO TO POSTMAN, add the below id, and see if it works.

Go to POSTMAN
GET http://localhost:3000/user/63f3cb3ef47727f9feb42064



RECAP FOR USER MODEL

models 	   controllers 
user.js    UserController.js  routes.js  server.js

we first created our user model, the UserController, then routes, then we just require the route and use it in our maind module server.js



**************************CREATE EVENT AND USE MULTER TO UPLOAD FILE**************************


12. LET'S CREATE AN EVENT MODEL - ANOTHER FEATURE OF OUR WEB APP. WHERE USER CAN POST AN IMAGE AND
    TEXT.

    Our App is about Sports Hub. So we'll going to have user and events.
    Basically the first model we created is User model, now we'll create Event model

    Model>Controller>Route>Main Server

https://www.youtube.com/watch?v=U3B2TdYMmmU&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=3
16:03

in Models Folder, create event.js FILE. Then do the following.

EVENT.JS


const mongoose = require ("mongoose");

const EventSchema = new mongoose.Schema ({
    title: String,
    description: String,
    price: Number,
    thumbnail: String, //we are not going to save the image on the database but just the url of the image that we'll store in our app
    date: Date,
    //We wanted this event schema related to our User. Who created this event.
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    }
});

module.exports = mongoose.model ("Event", EventSchema);






#################
EventController.js

then in controllers folder, create EventController.js and do the following

const Event = require ("../models/event");
const User = require ("../models/user");

module.exports = {

    async createEvent (req, res) {

            						    //We have done object destructing to store the value we get from our req, from the body, header and file property.
            const {title, description, price } = req.body;  //req.body is something the user or the person is entering on the web app.
            const {_id} = req.headers;                      //req.headers the key pair that is autmatically created once we create a user or json object. _id is one of them.
                                                            //i forgot to put s in the word header, the reason it's not working.
            console.log(req.headers)
            const {filename} = req.file;

            const user = await User.findById(_id);  //There is no hearder for user_id so I use _id

            if (!user){
                return res.status(400).json({message: "User does not exist!"});
            }

            const event = await Event.create ({
                title,
                description,
                price, //no need to parseFloat here or else it will give the error.
                user:_id,
                thumbnail: filename
            });
            return res.json (event);



    }//createEVent End Syntax, do noto use semi colin here, only comma if you want to add another function.
}; //End Syntax of module.exports





#################

Upload.js

SETUP FILE UPLOAD USING MULTER

in src FOLDER, Create config FOLDER>then config.js file


const multer = require ("multer");
const path = require ("path"); //to handle directory.

module.exports = {

    storage: multer.diskStorage ({
            destination: path.resolve (__dirname, "..", "..", "files"),
            filename: (req, file, cb) =>{
                const ext =path.extname(file.originalname)
                const name = path.basename (file.originalname, ext)

                cb (null, `${name.replace(/\s/g,"")}-${Date.now()}${ext}`)

            }//End of filename 
    })

};




#################

routes.js

Let's create the routes for our Event. In routes.js


Add the following
const multer = require ("multer");

UserController = require ("./controllers/EventController")
const uploadConfig = require("./config/upload")

const upload = multer (uploadConfig);

//Event
routes.post('/event', upload.single("thumbnail"), EventController.createEvent);



***************************************************************

SEE THE BELOW UPDATED ROUTE.JS


const express = require ("express");
const multer = require ("multer"); //must be under the express

const UserController = require ("./controllers/UserController")
const EventController = require ("./controllers/EventController")
const uploadConfig = require("./config/upload")

const routes = express.Router();
const upload = multer (uploadConfig);



routes.get("/status", (req, res)=>{
    res.send ({status:200});
})

routes.get("/user/register", (req, res)=>{
    res.send ("First Route");
})

//USER
routes.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.
routes.get("/user/:userId", UserController.getUserById);

//Event
routes.post('/event', upload.single("thumbnail"), EventController.createEvent);

module.exports = routes;


#################

Let's Test our Event Route
Go to Postman
POST http://localhost:3000/event
Body>form-data
From the key, hover your mouse and you'll text or file option.


KEY			VALUE
title			This is my first event.
description		Do you like running?
price 			30000
thumbnail		upload your jpg file or any file.


Click Headers in Key and Value

KEY
user_id			paste one of the user id from your database whic you previously creaed.
			63f3cb3ef47727f9feb42064

Then click SEND Button





**************************EVENT AND MULTER TO UPLOAD FILE ARE WORKING**************************************



https://www.youtube.com/watch?v=U3B2TdYMmmU&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=4
28:08

Go to src FOLDER




REMARKS

UserController.js
we use _id instead of user_id.  _id is the automatic headers when creating a user


EventControol.js
we use _id instead of user_id.  _id is the automatic headers when creating a user




LET'S TEST AGAIN - POST A USER.

POSTMAN
POST http://localhost:3000/user/register
Click Body>Raw>JSON
{"firstName":"Margaret",
"lastName": "Martin",
"password" : "nobodyelse",
"email": "mmmmgmail.com"}

Get the Id
63fcfaa5109c78bb6f997b02


LET'S TEST AGAIN. POST AN EVENT
Go to Postman
POST http://localhost:3000/event
Body>form-data
From the key, hover your mouse and you'll text or file option.


KEY			VALUE
title			This is my first event.
description		Do you like running?
price 			30000
thumbnail		upload your jpg file or any file.
eveb


Click Headers, user and _id are both working

KEY			VALUE
_id 			63fd0371faf0409c31c9055a    automatic key after creating a user.

********************************************************************************************************************


LETS HOST THE STATIC files FOLDER


From the server.js

const path = require (path); //put under the routes
app.use ("/files", express.static(path.resolve(__dirname, "..", "files")))


LET'S TEST IT
Post an Event then get the thumbnail path e.g.
"thumbnail": "CRACKING-the-CODING-INTERVIEW-1678041402833.pdf",


Go to browser, access this file.
localhost:3000/files/CRACKING-the-CODING-INTERVIEW-1678041402833.pdf



Then go  to event.js

added

   {
        toJSON:{
            virtuals: true
        }

also added
EventSchema.virtual("thumbnail_url").get(function(){return `http://localhost:3000/files/${this.thumbnail}`});



UPDATED CODE

const mongoose = require ("mongoose");

const EventSchema = new mongoose.Schema ({
    title: String,
    description: String,
    price: Number,
    thumbnail: String, //we are not going to save the image on the database but just the url of the image that we'll store in our app
    date: Date,
    //We wanted this event schema related to our User. Who created this event.
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    },

    },
    {
        toJSON:{
            virtuals: true
        }
});

EventSchema.virtual("thumbnail_url").get(function(){return `http://localhost:3000/files/${this.thumbnail}`});


module.exports = mongoose.model ("Event", EventSchema);


TRY TO POST AN EVENT CHECK IF YOU WILL SEE the thumbnail_url path link

#################################################################################

https://www.youtube.com/watch?v=U3B2TdYMmmU&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb
55:17



LET'S GET THE EVENT BY ID

in routes.js add the below route
routes.get('/event/:eventId', EventController.getEventById);

************

in EventCotroller.js let's add the getEventById method


async getEventById (req, res){
        const {eventId} = req.params;

        try{
            const event = await Event.findById(eventId)

            if(event){
                return res.json(event)
            }


        }
        catch (error){
            return res.status(400).json({message: "EventId does not exist!"})
        }
    }//End of getEventById


***************
57:23


****
TEST YOUR POST ROUTE FOR  USER/REGISTER ROUTE http://localhost:3000/user/register
body>raw
{"firstName":"Margaret",
"lastName": "Martin",
"password" : "nobodyelse",
"email": "moe@gmail.com"}


****
TEST YOUR GET ROUTE FOR USER http://localhost:3000/user/6408bd8c19f2b68719b0610b
use the new created _id
6408bd8c19f2b68719b0610b



****
TEST YOUR  POST ROUTE FOR  EVENT

POST http://localhost:3000/event
Body>form-data then key and vaue pairs
title
description
price
thumbnail

in header use the below key and value pairs.
use the below id
_id	6408bd8c19f2b68719b0610b


REMARKS
After posting the event it will give another _id
6408becb00ac8a03a1a12d94
use this id to get the Event.


****
TEST YOUR GET ROUTE for the Event
GET http://localhost:3000/event/6408becb00ac8a03a1a12d94

*************************************************************************************


https://www.youtube.com/watch?v=STbqBxgKD2I&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=4
Complete Coding Bootcamp tutorial MERN Stack 2020 - episode 2



LET'S CREATE A ROUTE TO FETCH ALL THE EVENTS


Go to routes.js add the below route
routes.get("/events", EventController.getAllEvents);

//remarks we'll setup getAllEvents function later on in EventCtronroller.js


****

Then go to EventController.js add the below function


    async getAllEvents (req, res){

    
            try{
                const events = await Event.find({})
                if(events){
                    return res.json(events)
                }
            }
            catch(error){
                return res.status(400).json({message: "We don't have any events yet."}) 
            }
    }


Remarks:
Event is the name of our Event Moudle we set in event.js schema.

LET'S TEST OUR ROUTE. Go to postman or browser.
http://localhost:3000/events

**********

HERE IS THE UPDATED EventController.js

const Event = require ("../models/event");
const User = require ("../models/user");

module.exports = {

    async createEvent (req, res) {

            //We have done object destructing to store the value we get from our req, from the body, header and file property.
            const {title, description, price } = req.body;  //req.body is something the user or the person is entering on the web app.
            const {_id} = req.headers; //req.header the key pair that is autmatically created once we create a user or json object. _id is one of them.
                                       //i forgot to put s in the word header
            console.log(req.headers)
            const {filename} = req.file;

            const user = await User.findById(_id);  //There is no hearder for user_id so I use _id

            if (!user){
                return res.status(400).json({message: "User does not exist!"});
            }

            const event = await Event.create ({
                title,
                description,
                price, //no need to parseFlote here or else it will give the error.
                user:_id,
                thumbnail: filename
            });
            return res.json (event);



    },//createEVent End Syntax, do noto use semi colin here, only comma if you want to add another function.

    async getEventById (req, res){
        const {eventId} = req.params;
    
            try{
                const event = await Event.findById (eventId)
                if(event){
                    return res.json(event)
                }
            }
            catch(error){
                return res.status(400).json({message: "EventId does not exist."}) 
            }
    },

    async getAllEvents (req, res){

    
            try{
                const events = await Event.find({})
                if(events){
                    return res.json(events)
                }
            }
            catch(error){
                return res.status(400).json({message: "We don't have any events yet."}) 
            }
    }
        
}; //End Syntax of module.exports





***********************************************************

LET'S ADD sport Property in our event Model
We simply added new propery called sport: String,

***
See the below updated Code in event.js

const mongoose = require ("mongoose");

const EventSchema = new mongoose.Schema ({
    title: String,
    description: String,
    price: Number,
    thumbnail: String, //we are not going to save the image on the database but just the url of the image that we'll store in our app
    sport: String,
    date: Date,
    //We wanted this event schema related to our User. Who created this event.
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    },

    },
    {
        toJSON:{
            virtuals: true
        }
});//End of Event Schema

EventSchema.virtual("thumbnail_url").get(function(){return `http://localhost:3000/files/${this.thumbnail}`});


module.exports = mongoose.model ("Event", EventSchema);

***

then go to EventController.js
simply add sport on your createEvent async function



****

then let's update our ROUTE in routes.js
routes.get("/events/:sport", EventController.geteventbySport);


***

then we just have to add another getAllEvents function in EventController.js



    //route GET http://localhost:3000/events/EventNameHere  
    async geteventbySport (req, res){
        const {sport}  = req.params;
        const query = {sport} || {};

        try{
            const events = await Event.find(query)
            if(events){
                return res.json(events)
            }
        }
        catch(error){
            return res.status(400).json({message: "We don't have any events yet."}) 
        }
},


*******************

UPDATED EventController.js


const Event = require ("../models/event");
const User = require ("../models/user");

module.exports = {

    async createEvent (req, res) {

            //We have done object destructing to store the value we get from our req, from the body, header and file property.
            const {title, description, price } = req.body;  //req.body is something the user or the person is entering on the web app.
            const {_id} = req.headers; //req.header the key pair that is autmatically created once we create a user or json object. _id is one of them.
                                       //i forgot to put s in the word header
            console.log(req.headers)
            const {filename} = req.file;

            const user = await User.findById(_id);  //There is no hearder for user_id so I use _id

            if (!user){
                return res.status(400).json({message: "User does not exist!"});
            }

            const event = await Event.create ({
                title,
                description,
                price, //no need to parseFlote here or else it will give the error.
                user:_id,
                thumbnail: filename
            });
            return res.json (event);



    },//createEVent End Syntax, do noto use semi colin here, only comma if you want to add another function.

    async getEventById (req, res){
        const {eventId} = req.params;
    
            try{
                const event = await Event.findById (eventId)
                if(event){
                    return res.json(event)
                }
            }
            catch(error){
                return res.status(400).json({message: "EventId does not exist."}) 
            }
    },

    async getAllEvents (req, res){

    
            try{
                const events = await Event.find({})
                if(events){
                    return res.json(events)
                }
            }
            catch(error){
                return res.status(400).json({message: "We don't have any events yet."}) 
            }
    },

    
    async getAllEvents (req, res){
        const {sport}  = req.params;
        const query = {sport} || {};

        try{
            const events = await Event.find(query)
            if(events){
                return res.json(events)
            }
        }
        catch(error){
            return res.status(400).json({message: "We don't have any events yet."}) 
        }
}

    
        
}; //End Syntax of module.exports


********************************

LET'S TEST AGAIN. POST AN EVENT
Go to Postman
POST http://localhost:3000/event
Remarks: you will notice event is without s
Body>form-data
From the key, hover your mouse and you'll text or file option.


KEY			VALUE
title			This is my first event.
description		Do you like running?
price 			30000
thumbnail		upload your jpg file or any file.
sport			kissing


Click Headers, user and _id are both working

KEY			VALUE
_id 			6408bd8c19f2b68719b0610b    automatic key after creating a user.

********************************

LET'S TEST OUR ROUTE. Go to postman or browser.
To get all the events
http://localhost:3000/events
Remarks: u will see it's events


************
Let's check if we have kissing event

http://localhost:3000/events/kissing

***************************************************************************************************


https://www.youtube.com/watch?v=STbqBxgKD2I&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb
14:17




DELETE EVENT USING ID

in routes.js add the below route
routes.delete('/event/:eventId', EventController.delete);


in EventController.js

async delete (req, res){
    const {eventId} = req.params; //eventId is teh paramer in our delete route.

    try{
         await Event.findByIdAndDelete(eventId)
        return res.status(204).send();
        
    }
    catch(error){
        return res.status(400).json({message: "We don't have any events yet with this ID."}) 
    }

}



******************************************TESTING ALL OUR ROUTES**********************************


POST http://localhost:3000/user/register  - REGISTER USER
Body>Raw

{"firstName":"Jack",
"lastName": "Indigo",
"password" : "jack_indigo",
"email": "jack_indigo@gmail.com"}

Take the user id
"_id": "641b3d3fefffad25460e2c0c",



***********
GET  http://localhost:3000/user/:userId   - GET USER
	e.g. http://localhost:3000/user/641b3d3fefffad25460e2c0c

***********

YOU CANNOT POST AN EVENT IF YOU ARE NOT A USER
e.g. Registered User
      641b3d3fefffad25460e2c0c

POST AN EVENT

POST http://localhost:3000/event  - post event with _id
form-data

title
description
price
thumbnail
sport
headers 	use _id": "641b3d3fefffad25460e2c0c"

REMARKS
FIRST EVENT CREATED IS  "sport": "SWIMMING",
***********
GET ALL THE EVENTS

GET http://localhost:3000/events - get all events

Remarks:
The reason it was not working because we have 2 methods with the same name.
***********

GET THE EVENT BY EVENT OR SPORT NAME. IT'S CASE SENSITVE

GET http://localhost:3000/events/EventNameHere  
	e.g. http://localhost:3000/events/SECOND EVENT
	e.g. http://localhost:3000/events/uno  
        e.g. http://localhost:3000/events/SWIMMING
        event name is case sensitive...
 
***********
DELETE THE EVEN BY THE EVENTID

DELETE http://localhost:3000/event/entertheeventID
	e.g. DELETE http://localhost:3000/event/641b32d9e7973947e8ad8251
	e.g. DELETE http://localhost:3000/event/641b3dd5efffad25460e2c10



***********
ALL ROUTES

//USER
routes.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.
routes.get("/user/:userId", UserController.getUserById);

//Event
routes.get("/events/:sport", EventController.geteventbySport);
routes.get("/events", EventController.getAllEvents);
routes.get('/event/:eventId', EventController.getEventById);
routes.post('/event', upload.single("thumbnail"), EventController.createEvent);
routes.delete('/event/:eventId', EventController.delete);

Remarks
You can't have 2 the same custom method name otherwise it will not work.

*****************************************************************************************************


SEPARATION OF CONCERN. LETS MOVE SOME OF OUR EVENTS BEC OF SEPARATION OF CONCERN



//LOGIN CONTROLLER
routes.post ("/login", LoginController.store);

//USER
routes.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.
routes.get("/user/:userId", UserController.getUserById);

//Dashboard 
routes.get("/dashboard/:sport", DashboardController.geteventbySport);
routes.get("/dashboard", DashboardController.getAllEvents);
routes.get('/event/:eventId', DashboardController.getEventById);

//Event
routes.post('/event', upload.single("thumbnail"), EventController.createEvent);
routes.delete('/event/:eventId', EventController.delete);

module.exports = routes;



FIRST STEP
In controllers folder create a file called dashboardcontroller.js

See the below code

const Event = require ("../models/event");
const User = require ("../models/user");

module.exports = {


    async getEventById (req, res){
        const {eventId} = req.params;//eventId is our paramter in our routes.js routes.get('/event/:eventId', EventController.getEventById);
    
            try{
                const event = await Event.findById (eventId)
                if(event){
                    return res.json(event)
                }
            }
            catch(error){
                return res.status(400).json({message: "EventId does not exist."}) 
            }
    },

    async getAllEvents (req, res){

            try{
                const events = await Event.find()
          
                if(events){
                    return res.json(events)
                
                }
            }
            catch(error){
                return res.status(400).json({message: "We don't have any events yet."}) 
            }
    },

    //route GET http://localhost:3000/events/EventNameHere  
    async geteventbySport (req, res){
        const {sport}  = req.params;
        const query = {sport} || {};

        try{
            const events = await Event.find(query)
            if(events){
                return res.json(events)
            }
        }
        catch(error){
            return res.status(400).json({message: "We don't have any events yet."}) 
        }
},

    


}; //End Syntax of module.exports





*********************

See teh below EventController.js Updated Code
We remove some custom methods

const Event = require ("../models/event");
const User = require ("../models/user");

module.exports = {

    async createEvent (req, res) {

            //We have done object destructing to store the value we get from our req, from the body, header and file property.
            const {title, description, price, sport } = req.body;  //req.body is something the user or the person is entering on the web app.
            const {_id} = req.headers; //req.header the key pair that is autmatically created once we create a user or json object. _id is one of them.
                                       //i forgot to put s in the word header
            console.log(req.headers)
            const {filename} = req.file;

            const user = await User.findById(_id);  //There is no hearder for user_id so I use _id

            if (!user){
                return res.status(400).json({message: "User does not exist!"});
            }

            const event = await Event.create ({
                title,
                description,
                price, //no need to parseFlote here or else it will give the error.
                user:_id,
                thumbnail: filename,
                sport,
            });
            return res.json (event);



    },//createEVent End Syntax, do noto use semi colin here, only comma if you want to add another function.


    
async delete (req, res){
    const {eventId} = req.params; //eventId is teh paramer in our delete route.

    try{
         await Event.findByIdAndDelete(eventId)
        return res.status(204).send();
        
    }
    catch(error){
        return res.status(400).json({message: "We don't have any events yet with this ID."}) 
    }

}

    
        
}; //End Syntax of module.exports



*********************************

go to routes.js
const DashboardController = require ("./controllers/DashboardController")

then updated the below code

//Dashboard Controller
routes.get("/events/:sport", DashboardController.geteventbySport);
routes.get("/dashboard", DashboardController.getAllEvents);
routes.get('/event/:eventId', DashboardController.getEventById);



SEE TEH UPDATED CODE of routes.js

const express = require ("express");
const multer = require ("multer"); //must be under the express

const UserController = require ("./controllers/UserController")
const EventController = require ("./controllers/EventController")
const DashboardController = require ("./controllers/DashboardController")
const uploadConfig = require("./config/upload")

const routes = express.Router();
const upload = multer (uploadConfig);



routes.get("/status", (req, res)=>{
    res.send ({status:200});
})

routes.get("/user/register", (req, res)=>{
    res.send ("First Route");
})

//USER
routes.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.
routes.get("/user/:userId", UserController.getUserById);

//Dashboard Controller
routes.get("/events/:sport", DashboardController.geteventbySport);
routes.get("/dashboard", DashboardController.getAllEvents);
routes.get('/event/:eventId', DashboardController.getEventById);

//Event
routes.post('/event', upload.single("thumbnail"), EventController.createEvent);
routes.delete('/event/:eventId', EventController.delete);

module.exports = routes;


************************************************************************************





LET'S TEST OUR ROUTE AGAIN AFTER WE DID SEPARATION OF CONCERN FOR OUR EVENT


POST http://localhost:3000/user/register  - REGISTER USER
Body>Raw

{"firstName":"June",
"lastName": "Tolica",
"password" : "June Tolica",
"email": "JuneTolica@gmail.com"}

Take the user id
"_id": "641b4a685c4ac8a2254903d0",



***********
GET  http://localhost:3000/user/:userId   - GET USER
	e.g. http://localhost:3000/user/641b4a685c4ac8a2254903d0

***********

YOU CANNOT POST AN EVENT IF YOU ARE NOT A USER
e.g. Registered User
      641b4a685c4ac8a2254903d0


POST AN EVENT

POST http://localhost:3000/event  - post event with _id
form-data

title
description
price
thumbnail
sport
headers 	use _id": "641b4a685c4ac8a2254903d0"

REMARKS
FIRST EVENT CREATED IS  "sport": "KANTOT",
***********
GET ALL THE EVENTS

GET http://localhost:3000/dashboard - get all events

Remarks:
The reason it was not working because we have 2 methods with the same name.
***********

GET THE EVENT BY EVENT OR SPORT NAME. IT'S CASE SENSITVE

GET http://localhost:3000/dashboard/EventNameHere  
	e.g. http://localhost:3000/dashboard/SECOND EVENT
	e.g. http://localhost:3000/dashboard/uno  
        e.g. http://localhost:3000/dashboard/SWIMMING
	e.g. http://localhost:3000/dashboard/KANTOT
        event name is case sensitive...
 
***********
DELETE THE EVEN BY THE EVENTID

DELETE http://localhost:3000/event/entertheeventID
	e.g. DELETE http://localhost:3000/event/641b32d9e7973947e8ad8251
	e.g. DELETE http://localhost:3000/event/641b3dd5efffad25460e2c10
	e.g. 641b4ace5c4ac8a2254903d4



***********
ALL ROUTES

//USER
routes.post ("/user/register", UserController.createUser);
//my issue before, i forgot to put back slash before the user.
routes.get("/user/:userId", UserController.getUserById);

//Dashboard Controller
routes.get("/events/:sport", DashboardController.geteventbySport);
routes.get("/dashboard", DashboardController.getAllEvents);
routes.get('/event/:eventId', DashboardController.getEventById);

//Event
routes.post('/event', upload.single("thumbnail"), EventController.createEvent);
routes.delete('/event/:eventId', EventController.delete);

Remarks
You can't have 2 the same custom method name otherwise it will not work.


***************************************************************************************************


https://www.youtube.com/watch?v=STbqBxgKD2I&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb
32.40

CREATE A LOGIN CONTROLLER then a file called. LoginController.js

in LoginController.js


const bcrypt = require ("bcryptjs");
const User = require ("../models/User");



module.exports = {

async store (req, res){

    try{
        const {email, password} = req.body;
        if(!email || !password){
            return res.status(200).json ({message: "Required field missing."});
        }

        const user = await User.findOne ({email});
        if(!user){
            return res.status(200).json({message: "User not found! Do you want to register instead?"})
        }

        if (user && await bcrypt.compare (password, user.password)){
            const userResponse = {
                _id: user._id,
                email: user.email,
                firstName: user.firstName,
                lastName: user.lastName
            };

        

            return res.json(userResponse);
        }
        else{
            return res.status(200).json({message: "User not found! Do you want to register instead?"});
        }

    }

    catch (error){
        throw Error (`Error while authenticating a User ${error}`);
    }

} //end of store custom method
}; // end of module.exports



*****************************************

LETS REQUIRE THE LoginController.js in the routes.js and make our ROUTE


const LoginController = require("./controllers/LoginController");

//LOGIN CONTROLLER
routes.post ("/login", LoginController.store);


*****************************************

LETS TEST OUR LOGIN ROUTE

FIRST LET'S TRY TO REGISTER

POST http://localhost:3000/user/register  - REGISTER USER
Body>Raw

{"firstName":"June",
"lastName": "Tolica",
"password" : "June Tolica",
"email": "JuneTolica@gmail.com"}


ERROR
How to Fix Mongoose Cannot Overwrite Model Once Compiled Error


SOLUTION
FROM
module.exports = mongoose.model("User", UserSchema);
I have updated the User Model to this
module.exports = mongoose.models.User || mongoose.model("User", UserSchema);



const mongoose = require ("mongoose");
const UserSchema = new mongoose.Schema ({
    firstName: String,
    lastName: String,
    password: String,
    email: String,
});

module.exports = mongoose.models.User || mongoose.model("User", UserSchema);


******************************


FIRST LET'S TRY TO REGISTER

POST http://localhost:3000/user/register  - REGISTER USER
Body>Raw

{"firstName":"June",
"lastName": "Tolica",
"password" : "June Tolica",
"email": "JuneTolica@gmail.com"}


Take Note of Your Password
AdityaSignh


LET'S TEST OUR LOGIN ROUTE at 

POST http://localhost:3000/login

//LOGIN CONTROLLER
routes.post ("/login", LoginController.store);



******************************

https://www.youtube.com/watch?v=73WRxi49Czo&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=5
Complete Coding Bootcamp tutorial MERN Stack 2020 - episode 3

Go to models folder, create registration.js FILE


In registration.js file

const mongoose = require("mongoose");


const RegistrationSchema = new mongoose.Schema({
    date: String,
    approved: Boolean,
    sport: String,
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User" //this User name came from Event Model
    },
    event: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Event" //this Event  name came from Event Model
    }


});


module.exports = mongoose.model("Registration", RegistrationSchema)


REMARKS

highlight your code
alt + shift + f
It will automatically format your code.


******************************************************

Let's create a Registration Controller. Go to controllers folder, create a file
RegistrationController.js

require the registration models
add module.exports = {};
add your custom create method using async and await
do object desctructing for params, headers, body
then use await and create method to crate a new object for our registration model

see the below complete code RegistrationController.js

const Registration = require("../models/registration");


module.exports = {
    async create (req, res){

        const{user_id} = req.params;
        const {eventId} = req.headers;
        const {date} = req.body;

        const registration = await Registration.create ({
            user:user_id,
            event: eventId,
            date: date

        });
  
        // NOT WORKING - event and user not populating
        // await registration
        //     .populate('event')
        //     .populate('user', "-password")
        //     .execPopulate();

        return res.json(registration)

   

      
    }
};




******************************************************

Lets create our end point in our routes.js for this registration
Go to routes.js


const Registration = require ("./controllers/RegistrationController");


//REGISTRATION ROUTE
routes.post ("/registration/:eventId", Registration.create );


******************************************************
Let's test our route.

FIRST LET'S GET THE USER ID. LET'S CREATE A USER
routes.post ("/user/register", UserController.createUser);

POST http://localhost:3000/user/register  - REGISTER USER
Body>Raw

{"firstName":"Gigi",
"lastName": "Gandang Ganda",
"password" : "9jjjjj",
"email": "kkk@gmail.com"}

result
{
    "firstName": "Gigi",
    "lastName": "Gandang Ganda",
    "password": "$2a$10$ZGUch0Xhf3eleM/Ovhgo..bgIaX611NQs59dgrrFgGHscPUXDuqMq",
    "email": "kkk@gmail.com",
    "_id": "64272203ab49536585fb73b6",  //this is hte user
    "__v": 0
}




***********
GET  http://localhost:3000/user/:userId   - GET USER
	e.g. http://localhost:3000/user/64272203ab49536585fb73b6

***********

YOU CANNOT POST AN EVENT IF YOU ARE NOT A USER
e.g. Registered User
      64272203ab49536585fb73b6

SECOND LET GET ALL OUR EVENTS
routes.get("/dashboard", DashboardController.getAllEvents);
GET http://localhost:3000/dashboard

Take note of the _id of one of the event
"id": "641b399e99122a6851e950eb"
  "sport": "SECOND EVENT",
***********


POST  http://localhost:3000/registration/:eventId

REMARKS
In Postman
POST   http://localhost:3000/registration/641b38c999122a6851e950e1

In  Headers
user_id		64272203ab49536585fb73b6

Bod>Json
{"date": "21/05/2023"}


Remarks:
remember in our model for RegistrationController?
We did object destructiong for our eventId, user_id, and date.

Populate is not working
Error: Populate is not a function

**************************************************************************


https://www.youtube.com/watch?v=73WRxi49Czo&list=PLqrQf0z-Hg7jD3ASYy9febJhQoUbzC8kb&index=6
23:30


64271c5df22065bc78781ca1
