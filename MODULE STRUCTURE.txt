STRUCTURE

MAIN PROJECT FOLDER

	src	FOLDER

		controllers	FOLDER
			UserControler.js
				const User = require ("../models/User"); // 1st .dot root folder which is src FOLDER, 2nd . dot controlers folder then /models/User.js.
				const bcrypt = require ("bcryptjs");

		models		FOLDER
			User.js
				const mongoose = require ("mongoose");

	routes.js
		const express = require ("express");
		const routes = express.Router();//to import routes from a different file and inject to other file.
		const UserController =  require ("./controllers/UserController"); // rootfolder, in this case main project folder first dot, /controllers/UserController.js

	server.js
		const express = require ("express");
		const cors = require ("cors");
		const routes = require ("./routes"); //1st dot root folder which is src FOLDER, no other folder so no second dot. then /routes.js.
		const app = express();
		const mongoose = require ("mongoose");
.env
package.json
pakcage.lock.json
		"start": "nodemon src/server.js" 
		 not required to put the dot, the src FOLDER is in the root Folder


#################


REMARKS

.env	this is where we put our environment variables

server.js
	this is our main module where we require all our dependencies




CONCEPT

Create a Project Folder
Initialize your NPM & Set your Main Module
Install your Dependencies


express		for server
mongoose 	for database
cors            can allow request from different devices
dotenv 		to read environment  varaibles
nodemon		to automatically update our server for any changes
bcryptjs	to hash our password
multer 		is a node.js middleware for handling multipart/form-data , which is primarily used for uploading files

set your nodemon in package.json
Create your basic server with express
Use your middleware with the help of express use method

Get your connection string for your database
Set your enviroment variables
set, process, connect















